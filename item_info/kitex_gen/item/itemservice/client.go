// Code generated by Kitex v0.3.0. DO NOT EDIT.

package itemservice

import (
	"context"
	"github.com/cloudwego/kitex/client"
	"github.com/cloudwego/kitex/client/callopt"
	"item_info/kitex_gen/item"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	GetItem(ctx context.Context, req *item.GetItemRequest, callOptions ...callopt.Option) (r *item.GetItemResponse, err error)
	UpdateItem(ctx context.Context, req *item.UpdateItemRequest, callOptions ...callopt.Option) (r *item.UpdateItemResponse, err error)
	CreateItem(ctx context.Context, req *item.CreateItemRequest, callOptions ...callopt.Option) (r *item.CreateItemResponse, err error)
	GetItemList(ctx context.Context, req *item.GetItemListRequest, callOptions ...callopt.Option) (r *item.GetItemListResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kItemServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kItemServiceClient struct {
	*kClient
}

func (p *kItemServiceClient) GetItem(ctx context.Context, req *item.GetItemRequest, callOptions ...callopt.Option) (r *item.GetItemResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetItem(ctx, req)
}

func (p *kItemServiceClient) UpdateItem(ctx context.Context, req *item.UpdateItemRequest, callOptions ...callopt.Option) (r *item.UpdateItemResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateItem(ctx, req)
}

func (p *kItemServiceClient) CreateItem(ctx context.Context, req *item.CreateItemRequest, callOptions ...callopt.Option) (r *item.CreateItemResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateItem(ctx, req)
}

func (p *kItemServiceClient) GetItemList(ctx context.Context, req *item.GetItemListRequest, callOptions ...callopt.Option) (r *item.GetItemListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetItemList(ctx, req)
}
