// Code generated by Kitex v0.3.0. DO NOT EDIT.

package itemservice

import (
	"context"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	"item_info/kitex_gen/item"
)

func serviceInfo() *kitex.ServiceInfo {
	return itemServiceServiceInfo
}

var itemServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "ItemService"
	handlerType := (*item.ItemService)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetItem":              kitex.NewMethodInfo(getItemHandler, newItemServiceGetItemArgs, newItemServiceGetItemResult, false),
		"UpdateItem":           kitex.NewMethodInfo(updateItemHandler, newItemServiceUpdateItemArgs, newItemServiceUpdateItemResult, false),
		"CreateItem":           kitex.NewMethodInfo(createItemHandler, newItemServiceCreateItemArgs, newItemServiceCreateItemResult, false),
		"GetItemList":          kitex.NewMethodInfo(getItemListHandler, newItemServiceGetItemListArgs, newItemServiceGetItemListResult, false),
		"GetItemChangeHistory": kitex.NewMethodInfo(getItemChangeHistoryHandler, newItemServiceGetItemChangeHistoryArgs, newItemServiceGetItemChangeHistoryResult, false),
		"IncrCount":            kitex.NewMethodInfo(incrCountHandler, newItemServiceIncrCountArgs, newItemServiceIncrCountResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "item",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.3.0",
		Extra:           extra,
	}
	return svcInfo
}

func getItemHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*item.ItemServiceGetItemArgs)
	realResult := result.(*item.ItemServiceGetItemResult)
	success, err := handler.(item.ItemService).GetItem(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newItemServiceGetItemArgs() interface{} {
	return item.NewItemServiceGetItemArgs()
}

func newItemServiceGetItemResult() interface{} {
	return item.NewItemServiceGetItemResult()
}

func updateItemHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*item.ItemServiceUpdateItemArgs)
	realResult := result.(*item.ItemServiceUpdateItemResult)
	success, err := handler.(item.ItemService).UpdateItem(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newItemServiceUpdateItemArgs() interface{} {
	return item.NewItemServiceUpdateItemArgs()
}

func newItemServiceUpdateItemResult() interface{} {
	return item.NewItemServiceUpdateItemResult()
}

func createItemHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*item.ItemServiceCreateItemArgs)
	realResult := result.(*item.ItemServiceCreateItemResult)
	success, err := handler.(item.ItemService).CreateItem(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newItemServiceCreateItemArgs() interface{} {
	return item.NewItemServiceCreateItemArgs()
}

func newItemServiceCreateItemResult() interface{} {
	return item.NewItemServiceCreateItemResult()
}

func getItemListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*item.ItemServiceGetItemListArgs)
	realResult := result.(*item.ItemServiceGetItemListResult)
	success, err := handler.(item.ItemService).GetItemList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newItemServiceGetItemListArgs() interface{} {
	return item.NewItemServiceGetItemListArgs()
}

func newItemServiceGetItemListResult() interface{} {
	return item.NewItemServiceGetItemListResult()
}

func getItemChangeHistoryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*item.ItemServiceGetItemChangeHistoryArgs)
	realResult := result.(*item.ItemServiceGetItemChangeHistoryResult)
	success, err := handler.(item.ItemService).GetItemChangeHistory(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newItemServiceGetItemChangeHistoryArgs() interface{} {
	return item.NewItemServiceGetItemChangeHistoryArgs()
}

func newItemServiceGetItemChangeHistoryResult() interface{} {
	return item.NewItemServiceGetItemChangeHistoryResult()
}

func incrCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*item.ItemServiceIncrCountArgs)
	realResult := result.(*item.ItemServiceIncrCountResult)
	success, err := handler.(item.ItemService).IncrCount(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newItemServiceIncrCountArgs() interface{} {
	return item.NewItemServiceIncrCountArgs()
}

func newItemServiceIncrCountResult() interface{} {
	return item.NewItemServiceIncrCountResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetItem(ctx context.Context, req *item.GetItemRequest) (r *item.GetItemResponse, err error) {
	var _args item.ItemServiceGetItemArgs
	_args.Req = req
	var _result item.ItemServiceGetItemResult
	if err = p.c.Call(ctx, "GetItem", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateItem(ctx context.Context, req *item.UpdateItemRequest) (r *item.UpdateItemResponse, err error) {
	var _args item.ItemServiceUpdateItemArgs
	_args.Req = req
	var _result item.ItemServiceUpdateItemResult
	if err = p.c.Call(ctx, "UpdateItem", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateItem(ctx context.Context, req *item.CreateItemRequest) (r *item.CreateItemResponse, err error) {
	var _args item.ItemServiceCreateItemArgs
	_args.Req = req
	var _result item.ItemServiceCreateItemResult
	if err = p.c.Call(ctx, "CreateItem", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetItemList(ctx context.Context, req *item.GetItemListRequest) (r *item.GetItemListResponse, err error) {
	var _args item.ItemServiceGetItemListArgs
	_args.Req = req
	var _result item.ItemServiceGetItemListResult
	if err = p.c.Call(ctx, "GetItemList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetItemChangeHistory(ctx context.Context, req *item.GetItemChangeHistoryRequest) (r *item.GetItemChangeHistoryResponse, err error) {
	var _args item.ItemServiceGetItemChangeHistoryArgs
	_args.Req = req
	var _result item.ItemServiceGetItemChangeHistoryResult
	if err = p.c.Call(ctx, "GetItemChangeHistory", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) IncrCount(ctx context.Context, req *item.IncrCountRequest) (r *item.IncrCountResponse, err error) {
	var _args item.ItemServiceIncrCountArgs
	_args.Req = req
	var _result item.ItemServiceIncrCountResult
	if err = p.c.Call(ctx, "IncrCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
